#!/usr/bin/env node

/**
 * Security Fix Script
 * Removes service role key usage from all API routes
 * Replaces with proper user-context authentication
 */

const fs = require('fs');
const path = require('path');

// List of files that use the vulnerable pattern
const VULNERABLE_FILES = [
  'src/app/api/appointments/book/route.ts',
  'src/app/api/test-reports/complete/route.ts',
  'src/app/api/appointments/[id]/route.ts',
  'src/app/api/team/appointments/route.ts',
  'src/app/api/reports/generate-pdf/route.ts',
  'src/app/api/test-reports/route.ts',
  'src/app/api/appointments/route.ts',
  'src/app/api/portal/devices/route.ts',
  'src/app/api/team/customers/route.ts',
  'src/app/api/water-districts/route.ts',
  'src/app/api/testing/workflow/route.ts',
  'src/app/api/test-reports/[id]/pdf/route.ts',
  'src/app/api/test-reports/submit-district/route.ts',
  'src/app/api/technicians/available/route.ts',
  'src/app/api/invoices/[id]/pdf/route.ts',
  'src/app/api/devices/route.ts',
  'src/app/api/data/import/route.ts',
  'src/app/api/data/export/route.ts',
  'src/app/api/billing/subscriptions/[id]/route.ts',
  'src/app/api/billing/subscriptions/route.ts',
  'src/app/api/appointments/send-reminders/route.ts',
  'src/app/api/appointments/resolve-conflicts/route.ts',
  'src/app/api/appointments/next-available/route.ts',
  'src/app/api/appointments/available-times/route.ts',
  'src/app/api/appointments/available-dates/route.ts',
];

function fixFile(filePath) {
  const fullPath = path.join(process.cwd(), filePath);

  if (!fs.existsSync(fullPath)) {
    console.log(`⚠️  File not found: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(fullPath, 'utf8');
  let modified = false;

  // Fix import statement
  if (content.includes('import { createRouteHandlerClient, supabaseAdmin }')) {
    content = content.replace(
      'import { createRouteHandlerClient, supabaseAdmin }',
      'import { createRouteHandlerClient }'
    );
    modified = true;
  }

  // Fix the vulnerable pattern
  const vulnerablePattern = /const supabase = supabaseAdmin \|\| createRouteHandlerClient\(request\);?/g;
  if (vulnerablePattern.test(content)) {
    content = content.replace(
      vulnerablePattern,
      'const supabase = createRouteHandlerClient(request);'
    );
    modified = true;
  }

  // Also check for direct supabaseAdmin usage
  if (content.includes('supabaseAdmin.')) {
    console.log(`⚠️  Direct supabaseAdmin usage found in ${filePath} - needs manual review`);
  }

  if (modified) {
    fs.writeFileSync(fullPath, content);
    console.log(`✅ Fixed: ${filePath}`);
    return true;
  } else {
    console.log(`ℹ️  No changes needed: ${filePath}`);
    return false;
  }
}

console.log('🔒 Starting security vulnerability fix...\n');

let fixedCount = 0;
let errorCount = 0;

for (const file of VULNERABLE_FILES) {
  try {
    if (fixFile(file)) {
      fixedCount++;
    }
  } catch (error) {
    console.error(`❌ Error fixing ${file}: ${error.message}`);
    errorCount++;
  }
}

console.log('\n📊 Security Fix Summary:');
console.log(`✅ Fixed: ${fixedCount} files`);
console.log(`❌ Errors: ${errorCount} files`);
console.log(`📁 Total processed: ${VULNERABLE_FILES.length} files`);

if (fixedCount > 0) {
  console.log('\n🎉 Security vulnerability partially fixed!');
  console.log('⚠️  Please review and test all changes before deploying.');
  console.log('⚠️  Some files may need manual review for direct supabaseAdmin usage.');
}